" My own vim configuration file
"
" Script made by Pietro Albini <pietro@pietroalbini.io>
" Released under the UNLICENSE license, aka public domain

syntax on
filetype indent plugin on
set nocompatible

function! s:source(file)
    let a:path = $HOME."/.vim/".a:file
    if !exists(a:path)
        execute 'source' fnameescape(a:path)
    endif
endfunction

" Load all plugins
runtime bundle/pathogen/autoload/pathogen.vim
execute pathogen#infect()

" Yes, I use this sometimes...
set mouse=a

" Truncate too long lines
set textwidth=79
autocmd FileType gitcommit :setlocal textwidth=72

" Line numbers
set number
set numberwidth=5

" Set up colors
set t_Co=256  " 256 colors mode
color pietroalbini  " My own color scheme

" Set up tabs
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set smarttab
set smartindent
autocmd FileType rst :setlocal shiftwidth=3 softtabstop=3
autocmd FileType yaml :setlocal shiftwidth=2 softtabstop=2
autocmd FileType make :setlocal noexpandtab

" Some search settings
set incsearch  " Start searching as of typing

" Highlight trailing whitespaces
set list
set listchars=trail:Â·,tab:\ \ 
hi SpecialKey ctermfg=9 ctermbg=NONE

" Adjust splits positions
set splitbelow splitright

" Load also the 2 lines above/below when scrolling
set scrolloff=2

" Setup colorline
set cursorline

" Highlight too long lines
match ErrorMsg '\%>79v.\+'

" Improve vimrc editing process
augroup vimrc_reload
    autocmd!
    autocmd BufWritePost $MYVIMRC bufdo source $MYVIMRC
augroup END
nnoremap <leader>rc :vsplit $MYVIMRC<cr>:autocmd BufWritePost $MYVIMRC :bd<cr>

" Some configuration for vim-markdown
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1

" Some configuration for gitgutter
let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_sign_modified = "|"
let g:gitgutter_sign_modified_removed = "|"
hi GitGutterAdd cterm=bold ctermfg=83 ctermbg=NONE
hi GitGutterChange cterm=bold ctermfg=221 ctermbg=NONE
hi GitGutterDelete cterm=bold ctermfg=160 ctermbg=NONE
hi link GitGutterChangeDelete GitGutterChange


call s:source("mappings.vim")

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
